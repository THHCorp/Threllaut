@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Threllaut.Data.Contexts

@implements IDisposable

@inject IDbContextFactory<ApplicationDbContext> Factory

<MudText Typo="Typo.h4">@Item.Name</MudText>

<MudDataGrid Items="_allTasks" MultiSelection Groupable Filterable GroupExpanded>
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => _open = !_open" />
        <MudPopover Open="_open" Paper="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
            <MudCard>
                <MudCardHeader>Add new task</MudCardHeader>
                <MudCardContent>
                    <MudForm @ref=_form @bind-IsValid="_success" ValidationDelay="50">
                        <MudTextField @ref=_nameField T="string" Label="Name" Required RequiredError="Name is required."
                        Validation="@(new MaxLengthAttribute(50) { ErrorMessage = "The name is too long" })" />
                        <MudTextField @ref=_descriptionField T="string" Label="Description" />
                        <MudAutocomplete @ref=_columnField Label="Category" @bind-Value="_column"
                        SearchFunc="Search"
                        ToStringFunc="@(c => c?.Name)"
                        Required RequiredError="Task category is required." Clearable="true"
                        OnClearButtonClick="Clear" />
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick=AddTaskAsync>Add</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="t => t.Name" />
        <PropertyColumn Property="t => t.Column.Name" Title="Category" Groupable="true" @bind-Grouping=_columnGroup />
    </Columns>
</MudDataGrid>

@code {
    private bool _columnGroup = true;
    private List<BoardTask> _allTasks = default!;
    private bool _open;
    private bool _success;
    private MudTextField<string> _nameField = default!;
    private MudTextField<string> _descriptionField = default!;
    private Column? _column;
    private MudAutocomplete<Column> _columnField = default!;
    private MudForm _form = default!;

    bool _busy;

    private ApplicationDbContext Context = default!;

    [Parameter]
    public required Board Item { get; set; }

    public void Dispose() => Context?.Dispose();

    protected override async Task OnInitializedAsync()
    {
        Context = await Factory.CreateDbContextAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Context.Boards.Attach(Item);
        await Context.Boards.Entry(Item).Collection(b => b.Columns).LoadAsync();
        _allTasks = await Context.Boards.Entry(Item)
            .Collection(b => b.Columns).Query()
            .SelectMany(c => c.Tasks).ToListAsync();
    }

    private async Task AddTaskAsync()
    {
        var task = new BoardTask
            {
                Name = _nameField.Value!,
                Description = _descriptionField.Value,
                Column = _column!,
                Assignees = [],
                Events = []
            };
        _column!.Tasks.Add(task);
        _open = false;
        _allTasks.Add(task);
        _column = null;
        StateHasChanged();
        if (_busy)
            return;
        try
        {
            _busy = true;
            await Context.SaveChangesAsync();
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task Clear()
    {
        this._column = null;
        await _columnField.ResetAsync();
        await _form.Validate();
        StateHasChanged();
    }

    private Task<IEnumerable<Column>> Search(string? value, CancellationToken cancellationToken = default) => Task.FromResult(
        Item.Columns.Where(c => _column is null
                && c != _column
                && c.Name.Contains(value ?? string.Empty, StringComparison.CurrentCultureIgnoreCase)));
}
