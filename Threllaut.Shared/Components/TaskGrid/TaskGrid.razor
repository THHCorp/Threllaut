@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Threllaut.Data.Contexts

@inject IDbContextFactory<ApplicationDbContext> Factory

@if (board is not null)
{
    <MudText Typo="Typo.h4">@board.Name</MudText>

    <MudDataGrid Items="board.Columns.SelectMany(c => c.Tasks)" MultiSelection Groupable Filterable GroupExpanded>
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => _open = !_open" />
            <MudPopover Open="_open" Paper="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
                <MudCard>
                    <MudCardHeader>Add new task</MudCardHeader>
                    <MudCardContent>
                        <MudForm @ref=_form @bind-IsValid="_success" ValidationDelay="50">
                            <MudTextField @ref=_nameField T="string" Label="Name" Required RequiredError="Name is required."
                            Validation="@(new MaxLengthAttribute(50) { ErrorMessage = "The name is too long" })" />
                            <MudTextField @ref=_descriptionField T="string" Label="Description" />
                            <MudAutocomplete @ref=_columnField Label="Category" @bind-Value="_column"
                                SearchFunc="Search"
                                ToStringFunc="@(c => c?.Name)"
                                Required RequiredError="Task category is required." Clearable="true"
                                OnClearButtonClick="Clear" />
                        </MudForm>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick=AddTaskAsync>Add</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPopover>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="t => t.Name" />
            <PropertyColumn Property="t => t.Column.Name" Title="Category" Groupable="true" @bind-Grouping=_columnGroup />
        </Columns>
    </MudDataGrid>
}

@code {
    private Board board = default!;
    private bool _columnGroup = true;
    private bool _open;
    private bool _success;
    private MudTextField<string> _nameField = default!;
    private MudTextField<string> _descriptionField = default!;
    private Column? _column;
    private MudAutocomplete<Column> _columnField = default!;
    private MudForm _form = default!;

    [Parameter]
    public required Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var context = await Factory.CreateDbContextAsync();
        board = await context.Boards.AsSingleQuery().AsNoTracking()
            .Include(b => b.Columns)
            .ThenInclude(c => c.Tasks)
            .SingleAsync(b => b.Id == Id);
    }

    private async Task AddTaskAsync()
    {
        await using var context = await Factory.CreateDbContextAsync();
        var task = new BoardTask
            {
                Name = _nameField.Value!,
                Description = _descriptionField.Value,
                Column = _column!,
                Assignees = [],
                Events = []
            };
        _column!.Tasks.Add(task);
        context.Attach(_column);
        context.Tasks.Add(task);
        await context.SaveChangesAsync();
        _open = false;
        _column = null;
        StateHasChanged();
    }

    private async Task Clear()
    {
        this._column = null;
        await _columnField.ResetAsync();
        await _form.Validate();
        StateHasChanged();
    }

    private Task<IEnumerable<Column>> Search(string? value, CancellationToken cancellationToken = default) => Task.FromResult(
        board.Columns.Where(c => _column is null
                && c != _column
                && c.Name.Contains(value ?? string.Empty, StringComparison.CurrentCultureIgnoreCase)));
}
