@using Microsoft.EntityFrameworkCore
@using Threllaut.Data.Contexts

@inject IDbContextFactory<ApplicationDbContext> Factory

@if (board is not null)
{
    <MudText Typo="Typo.h4">@board.Name</MudText>
    <MudDropContainer @ref=_container T="BoardTask"
        Items="board.Columns.SelectMany(c => c.Tasks)" ItemDropped="ItemUpdatedAsync"
        ItemsSelector="@((item, dropzone) => item.Column.Id.ToString() == dropzone)">
        <ChildContent>
            <MudStack Row>
                @foreach (var column in board.Columns)
                {
                    <ColumnDisplay Item="column" OnNewTask=AddTaskAsync />
                }
            </MudStack>
        </ChildContent>
        <ItemRenderer>
            <TaskCard Item="context" />
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    private MudDropContainer<BoardTask> _container = default!;

    private Board board = default!;

    [Parameter]
    public required Guid Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await using var context = await Factory.CreateDbContextAsync();
        board = await context.Boards.AsSingleQuery().AsNoTracking()
            .Include(b => b.Columns)
            .ThenInclude(c => c.Tasks)
            .SingleAsync(b => b.Id == Id);
    }

    private async Task AddTaskAsync(BoardTask task)
    {
        await using var context = await Factory.CreateDbContextAsync();
        task.Column.Tasks.Add(task);
        StateHasChanged();
        _container.Refresh();
        context.Attach(task.Column);
        context.Tasks.Add(task);
        await context.SaveChangesAsync();
    }

    private async Task ItemUpdatedAsync(MudItemDropInfo<BoardTask> dropItem)
    {
        await using var context = await Factory.CreateDbContextAsync();
        if (dropItem.Item is null)
            return;
        dropItem.Item.Column = board.Columns.Single(c => c.Id.ToString() == dropItem.DropzoneIdentifier);
        context.Tasks.Update(dropItem.Item);
        await context.SaveChangesAsync();
    }
}
