@page "/grid"

@using Microsoft.EntityFrameworkCore
@using Threllaut.Data.Contexts
@using Threllaut.Shared.Components.TaskGrid

@inject IDbContextFactory<ApplicationDbContext> Factory

<PageTitle>Grid</PageTitle>

@if (_board is null)
{
    <MudAutocomplete @ref=_boardSelector Label="Board" @bind-Value="_board"
    SearchFunc="Search" ToStringFunc="@(c => c?.Name)"
    Clearable="true" OnClearButtonClick="Clear" />
} else {
    <TaskGrid Id="_board.Id" />
}

@code {
    private Data.Board? _board = null;
    private MudAutocomplete<Data.Board> _boardSelector = default!;
    private List<Data.Board> _boards = default!;

    protected override async Task OnInitializedAsync() 
    {
        await using var context = await Factory.CreateDbContextAsync();
        _boards = await context.Boards.AsSingleQuery().AsNoTracking().ToListAsync();
    }

    private async Task Clear()
    {
        this._board = null;
        await _boardSelector.ResetAsync();
        StateHasChanged();
    }

    private Task<IEnumerable<Data.Board>> Search(string? value, CancellationToken cancellationToken = default) =>
        Task.FromResult((IEnumerable<Data.Board>)_boards.Where(c => c.Name.Contains(value ?? string.Empty)));
}
